{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AA0tCA;;GAEG;AACH,MAAM,CAAN,IAAY,kBA6BX;AA7BD,WAAY,kBAAkB;IAC5B;;;;;OAKG;IACH,mEAAY,CAAA;IACZ;;;;;OAKG;IACH,2DAAQ,CAAA;IACR;;;;;OAKG;IACH,qEAAa,CAAA;IACb;;;;;OAKG;IACH,2EAAgB,CAAA;AAClB,CAAC,EA7BW,kBAAkB,KAAlB,kBAAkB,QA6B7B","sourcesContent":["import type { PermissionState, PluginListenerHandle } from '@capacitor/core';\n\nexport type BluetoothLowEnergyPermissionType =\n  | 'bluetooth'\n  | 'bluetoothConnect'\n  | 'bluetoothScan'\n  | 'location'\n  | 'notifications';\n\nexport interface BluetoothLowEnergyPluginPermission {\n  permissions: BluetoothLowEnergyPermissionType[];\n}\n\nexport interface BluetoothLowEnergyPlugin {\n  /**\n   * Connect to a BLE device.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  connect(options: ConnectOptions): Promise<void>;\n  /**\n   * Create a bond with the BLE device.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  createBond(options: CreateBondOptions): Promise<void>;\n  /**\n   * Disconnect from the BLE device.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  disconnect(options: DisconnectOptions): Promise<void>;\n  /**\n   * Discover services provided by the device.\n   *\n   * On **iOS**, this operation may take up to 30 seconds.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  discoverServices(options: DiscoverServiceOptions): Promise<void>;\n  /**\n   * Get a list of connected devices.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  getConnectedDevices(): Promise<GetConnectedDevicesResult>;\n  /**\n   * Get a list of services provided by the device.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  getServices(options: GetServicesOptions): Promise<GetServicesResult>;\n  /**\n   * Initialize the plugin. This method must be called before any other method.\n   *\n   * On **iOS**, this will prompt the user for Bluetooth permissions.\n   *\n   * Only available on iOS.\n   *\n   * @since 6.0.0\n   */\n  initialize(): Promise<void>;\n  /**\n   * Check if the device is bonded.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  isBonded(options: IsBondedOptions): Promise<IsBondedResult>;\n  /**\n   * Check if Bluetooth is enabled.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  isEnabled(): Promise<IsEnabledResult>;\n  /**\n   * Open the Bluetooth settings on the device.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  openAppSettings(): Promise<void>;\n  /**\n   * Open the Bluetooth settings on the device.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  openBluetoothSettings(): Promise<void>;\n  /**\n   * Open the location settings on the device.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  openLocationSettings(): Promise<void>;\n  /**\n   * Read the value of a characteristic.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  readCharacteristic(\n    options: ReadCharacteristicOptions,\n  ): Promise<ReadCharacteristicResult>;\n  /**\n   * Read the value of a descriptor.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  readDescriptor(options: ReadDescriptorOptions): Promise<ReadDescriptorResult>;\n  /**\n   * Read the RSSI value of the device.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  readRssi(options: ReadRssiOptions): Promise<ReadRssiResult>;\n  /**\n   * Request a connection priority.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  requestConnectionPriority(\n    options: RequestConnectionPriorityOptions,\n  ): Promise<void>;\n  /**\n   * Request an MTU size.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  requestMtu(options: RequestMtuOptions): Promise<void>;\n  /**\n   * Start listening for characteristic value changes. This will emit the `characteristicChanged` event when a value changes.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  startCharacteristicNotifications(\n    options: StartCharacteristicNotificationsOptions,\n  ): Promise<void>;\n  /**\n   * Start the foreground service.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  startForegroundService(options: StartForegroundServiceOptions): Promise<void>;\n  /**\n   * Start scanning for BLE devices. This will emit the `deviceScanned` event when a device is found.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  startScan(options?: StartScanOptions): Promise<void>;\n  /**\n   * Stop listening for characteristic value changes.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  stopCharacteristicNotifications(\n    options: StopCharacteristicNotificationsOptions,\n  ): Promise<void>;\n  /**\n   * Stop the foreground service.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  stopForegroundService(): Promise<void>;\n  /**\n   * Stop scanning for BLE devices.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  stopScan(): Promise<void>;\n  /**\n   * Write a value to a characteristic.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  writeCharacteristic(options: WriteCharacteristicOptions): Promise<void>;\n  /**\n   * Write a value to a descriptor.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  writeDescriptor(options: WriteDescriptorOptions): Promise<void>;\n  /**\n   * Check permissions for the plugin.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  checkPermissions(): Promise<PermissionStatus>;\n  /**\n   * Request permissions for the plugin.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  requestPermissions(\n    permissions?: BluetoothLowEnergyPluginPermission,\n  ): Promise<PermissionStatus>;\n  /**\n   * Called when a characteristic value changes.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  addListener(\n    eventName: 'characteristicChanged',\n    listenerFunc: (event: CharacteristicChangedEvent) => void,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Called when a device is disconnected.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  addListener(\n    eventName: 'deviceDisconnected',\n    listenerFunc: (event: DeviceDisconnectedEvent) => void,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Called when an error occurs during the scan session.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  addListener(\n    eventName: 'deviceScanned',\n    listenerFunc: (event: DeviceScannedEvent) => void,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Remove all listeners for this plugin.\n   *\n   * @since 6.0.0\n   */\n  removeAllListeners(): Promise<void>;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface CharacteristicChangedEvent {\n  /**\n   * The UUID of the characteristic.\n   *\n   * @since 6.0.0\n   * @example \"00002A29-0000-1000-8000-00805F9B34FB\"\n   */\n  characteristicId: string;\n  /**\n   * The address of the device.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The UUID of the service.\n   *\n   * @since 6.0.0\n   * @example \"0000180A-0000-1000-8000-00805F9B34FB\"\n   */\n  serviceId?: string;\n  /**\n   * The changed value bytes of the characteristic.\n   *\n   * @since 6.0.0\n   * @example [0, 1, 2, 3]\n   */\n  value: number[];\n}\n\n/**\n * @since 6.0.0\n */\nexport interface DeviceDisconnectedEvent {\n  /**\n   * The address of the disconnected device.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The name of the disconnected device.\n   *\n   * @since 6.0.0\n   * @example \"My Device\"\n   */\n  name?: string;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface ConnectOptions {\n  /**\n   * The address of the device to connect to.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The timeout for the connect operation in milliseconds.\n   *\n   * If the operation takes longer than this value, the promise will be rejected.\n   *\n   * @since 6.0.0\n   * @example 10000\n   * @default 10000\n   */\n  timeout?: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface CreateBondOptions {\n  /**\n   * The address of the device to create a bond with.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The timeout for the create bond operation in milliseconds.\n   *\n   * If the operation takes longer than this value, the promise will be rejected.\n   *\n   * @since 6.0.0\n   * @example 10000\n   * @default 10000\n   */\n  timeout?: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface DisconnectOptions {\n  /**\n   * The address of the device to disconnect from.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The timeout for the disconnect operation in milliseconds.\n   *\n   * If the operation takes longer than this value, the promise will be rejected.\n   *\n   * @since 6.0.0\n   * @example 5000\n   * @default 5000\n   */\n  timeout?: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface DiscoverServiceOptions {\n  /**\n   * The address of the device to discover services for.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The timeout for the discover services operation in milliseconds.\n   *\n   * If the operation takes longer than this value, the promise will be rejected.\n   *\n   * @since 6.0.0\n   * @example 20000\n   * @default 20000\n   */\n  timeout?: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface GetServicesOptions {\n  /**\n   * The address of the device to get the services for.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The timeout for the get services operation in milliseconds.\n   *\n   * If the operation takes longer than this value, the promise will be rejected.\n   *\n   * @since 6.0.0\n   * @example 5000\n   * @default 5000\n   */\n  timeout?: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface GetServicesResult {\n  /**\n   * An array of services provided by the device.\n   *\n   * @since 6.0.0\n   */\n  services: Service[];\n}\n\n/**\n * @since 6.0.0\n */\nexport interface GetConnectedDevicesResult {\n  /**\n   * An array of connected devices.\n   *\n   * @since 6.0.0\n   */\n  devices: Device[];\n}\n\n/**\n * @since 6.0.0\n */\nexport interface IsBondedOptions {\n  /**\n   * The address of the device to check if it is bonded.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The timeout for the is bonded operation in milliseconds.\n   *\n   * If the operation takes longer than this value, the promise will be rejected.\n   *\n   * @since 6.0.0\n   * @example 5000\n   */\n  timeout?: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface IsBondedResult {\n  /**\n   * Whether or not the device is bonded.\n   *\n   * @since 6.0.0\n   * @example true\n   */\n  bonded: boolean;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface IsEnabledResult {\n  /**\n   * Whether or not Bluetooth is enabled.\n   *\n   * @since 6.0.0\n   * @example true\n   */\n  enabled: boolean;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface ReadCharacteristicOptions {\n  /**\n   * The UUID of the characteristic to read.\n   *\n   * @since 6.0.0\n   * @example \"00002A29-0000-1000-8000-00805F9B34FB\"\n   */\n  characteristicId: string;\n  /**\n   * The address of the device to read the characteristic from.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The UUID of the service to read the characteristic from.\n   *\n   * @since 6.0.0\n   * @example \"0000180A-0000-1000-8000-00805F9B34FB\"\n   */\n  serviceId: string;\n  /**\n   * The timeout for the read operation in milliseconds.\n   *\n   * If the operation takes longer than this value, the promise will be rejected.\n   *\n   * @since 6.0.0\n   * @example 5000\n   * @default 5000\n   */\n  timeout?: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface ReadCharacteristicResult {\n  /**\n   * The value bytes of the characteristic.\n   *\n   * @since 6.0.0\n   * @example [0, 1, 2, 3]\n   */\n  value: number[];\n}\n\n/**\n * @since 6.0.0\n */\nexport interface ReadDescriptorOptions {\n  /**\n   * The UUID of the characteristic that the descriptor belongs to.\n   *\n   * @since 6.0.0\n   * @example \"00002A29-0000-1000-8000-00805F9B34FB\"\n   */\n  characteristicId: string;\n  /**\n   * The UUID of the descriptor to read.\n   *\n   * @since 6.0.0\n   * @example \"00002A29-0000-1000-8000-00805F9B34FB\"\n   */\n  descriptorId: string;\n  /**\n   * The address of the device to read the descriptor from.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The UUID of the service that the descriptor belongs to.\n   *\n   * @since 6.0.0\n   * @example \"0000180A-0000-1000-8000-00805F9B34FB\"\n   */\n  serviceId: string;\n  /**\n   * The timeout for the read operation in milliseconds.\n   *\n   * If the operation takes longer than this value, the promise will be rejected.\n   *\n   * @since 6.0.0\n   * @example 5000\n   * @default 5000\n   */\n  timeout?: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface ReadDescriptorResult {\n  /**\n   * The value bytes of the descriptor.\n   *\n   * @since 6.0.0\n   * @example [0, 1, 2, 3]\n   */\n  value: number[];\n}\n\n/**\n * @since 6.0.0\n */\nexport interface ReadRssiOptions {\n  /**\n   * The address of the device to read the RSSI for.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The timeout for the read RSSI operation in milliseconds.\n   *\n   * If the operation takes longer than this value, the promise will be rejected.\n   *\n   * @since 6.0.0\n   * @example 5000\n   * @default 5000\n   */\n  timeout?: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface RequestConnectionPriorityOptions {\n  /**\n   * The address of the device to request the connection priority for.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The connection priority to request.\n   *\n   * @since 6.0.0\n   */\n  connectionPriority: ConnectionPriority;\n  /**\n   * The timeout for the request connection priority operation in milliseconds.\n   *\n   * If the operation takes longer than this value, the promise will be rejected.\n   *\n   * @since 6.0.0\n   * @example 5000\n   */\n  timeout?: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface RequestMtuOptions {\n  /**\n   * The address of the device to request the MTU size for.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The mtu size to request.\n   *\n   * @since 6.0.0\n   */\n  mtu: number;\n  /**\n   * The timeout for the request MTU operation in milliseconds.\n   *\n   * If the operation takes longer than this value, the promise will be rejected.\n   *\n   * @since 6.0.0\n   * @example 5000\n   */\n  timeout?: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface ReadRssiResult {\n  /**\n   * The RSSI value.\n   *\n   * @since 6.0.0\n   * @example -50\n   */\n  rssi: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface StartCharacteristicNotificationsOptions {\n  /**\n   * The UUID of the characteristic to start notifications for.\n   *\n   * @since 6.0.0\n   * @example \"00002A29-0000-1000-8000-00805F9B34FB\"\n   */\n  characteristicId: string;\n  /**\n   * The address of the device to start notifications for.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The UUID of the service to start notifications for.\n   *\n   * @since 6.0.0\n   * @example \"0000180A-0000-1000-8000-00805F9B34FB\"\n   */\n  serviceId: string;\n  /**\n   * The timeout for the start notifications operation in milliseconds.\n   *\n   * If the operation takes longer than this value, the promise will be rejected.\n   *\n   * @since 6.0.0\n   * @example 5000\n   * @default 5000\n   */\n  timeout?: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface StartForegroundServiceOptions {\n  /**\n   * The body of the notification, shown below the title.\n   *\n   * @since 6.0.0\n   * @example \"This is the body of the notification\"\n   */\n  body: string;\n  /**\n   * The notification identifier.\n   *\n   * @since 6.0.0\n   * @example 123\n   */\n  id: number;\n  /**\n   * The status bar icon for the notification.\n   *\n   * Icons should be placed in your app's `res/drawable` folder. The value for\n   * this option should be the drawable resource ID, which is the filename\n   * without an extension.\n   *\n   * @since 6.0.0\n   * @example \"ic_stat_icon_config_sample\"\n   */\n  smallIcon: string;\n  /**\n   * The title of the notification.\n   *\n   * @since 6.0.0\n   * @example \"This is the title of the notification\"\n   */\n  title: string;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface StartScanOptions {\n  /**\n   * Find devices with services that match any of the provided UUIDs.\n   *\n   * Only available on iOS.\n   *\n   * @since 6.0.0\n   * @example [\"0000180A-0000-1000-8000-00805F9B34FB\"]\n   */\n  serviceIds?: string[];\n}\n\n/**\n * @since 6.0.0\n */\nexport interface StopCharacteristicNotificationsOptions {\n  /**\n   * The UUID of the characteristic to stop notifications for.\n   *\n   * @since 6.0.0\n   * @example \"00002A29-0000-1000-8000-00805F9B34FB\"\n   */\n  characteristicId: string;\n  /**\n   * The address of the device to stop notifications for.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The UUID of the service to stop notifications for.\n   *\n   * @since 6.0.0\n   * @example \"0000180A-0000-1000-8000-00805F9B34FB\"\n   */\n  serviceId: string;\n  /**\n   * The timeout for the stop notifications operation in milliseconds.\n   *\n   * If the operation takes longer than this value, the promise will be rejected.\n   *\n   * @since 6.0.0\n   * @example 5000\n   * @default 5000\n   */\n  timeout?: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface WriteCharacteristicOptions {\n  /**\n   * The UUID of the characteristic to write.\n   *\n   * @since 6.0.0\n   * @example \"00002A29-0000-1000-8000-00805F9B34FB\"\n   */\n  characteristicId: string;\n  /**\n   * The address of the device to write the characteristic to.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The UUID of the service to write the characteristic to.\n   *\n   * @since 6.0.0\n   * @example \"0000180A-0000-1000-8000-00805F9B34FB\"\n   */\n  serviceId: string;\n  /**\n   * The timeout for the write operation in milliseconds.\n   *\n   * If the operation takes longer than this value, the promise will be rejected.\n   *\n   * @since 6.0.0\n   * @example 5000\n   * @default 5000\n   */\n  timeout?: number;\n  /**\n   * The type of write operation.\n   *\n   * @since 6.1.0\n   * @default 'default'\n   * @example 'withoutResponse'\n   */\n  type?: 'default' | 'withoutResponse';\n  /**\n   * The value bytes to write to the characteristic.\n   *\n   * @since 6.0.0\n   * @example [0, 1, 2, 3]\n   */\n  value: number[];\n}\n\n/**\n * @since 6.0.0\n */\nexport interface WriteDescriptorOptions {\n  /**\n   * The UUID of the characteristic that the descriptor belongs to.\n   *\n   * @since 6.0.0\n   * @example \"00002A29-0000-1000-8000-00805F9B34FB\"\n   */\n  characteristicId: string;\n  /**\n   * The UUID of the descriptor.\n   *\n   * @since 6.0.0\n   * @example \"00002A29-0000-1000-8000-00805F9B34FB\"\n   */\n  descriptorId: string;\n  /**\n   * The address of the device that the descriptor belongs to.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  deviceId: string;\n  /**\n   * The UUID of the service that the descriptor belongs to.\n   *\n   * @since 6.0.0\n   * @example \"0000180A-0000-1000-8000-00805F9B34FB\"\n   */\n  serviceId: string;\n  /**\n   * The timeout for the write operation in milliseconds.\n   *\n   * If the operation takes longer than this value, the promise will be rejected.\n   *\n   * @since 6.0.0\n   * @example 5000\n   * @default 5000\n   */\n  timeout?: number;\n  /**\n   * The value bytes of the descriptor.\n   *\n   * @since 6.0.0\n   * @example [0, 1, 2, 3]\n   */\n  value: number[];\n}\n\n/**\n * @since 6.0.0\n */\nexport interface Characteristic {\n  /**\n   * The UUID of the characteristic.\n   *\n   * @since 6.0.0\n   * @example \"00002A29-0000-1000-8000-00805F9B34FB\"\n   */\n  id: string;\n  /**\n   * The descriptors of the characteristic.\n   *\n   * @since 6.0.0\n   */\n  descriptors: Descriptor[];\n  /**\n   * The properties of the characteristic.\n   *\n   * @since 6.0.0\n   */\n  properties: CharacteristicProperties;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface CharacteristicProperties {\n  /**\n   * Whether or not the characteristic can be broadcast.\n   *\n   * @since 6.0.0\n   */\n  broadcast: boolean;\n  /**\n   * Whether or not the characteristic can be read.\n   *\n   * @since 6.0.0\n   */\n  read: boolean;\n  /**\n   * Whether or not the characteristic can be written without response.\n   *\n   * @since 6.0.0\n   */\n  writeWithoutResponse: boolean;\n  /**\n   * Whether or not the characteristic can be written.\n   *\n   * @since 6.0.0\n   */\n  write: boolean;\n  /**\n   * Whether or not the characteristic supports notifications.\n   *\n   * @since 6.0.0\n   */\n  notify: boolean;\n  /**\n   * Whether or not the characteristic supports indications.\n   *\n   * @since 6.0.0\n   */\n  indicate: boolean;\n  /**\n   * Whether or not the characteristic supports signed writes.\n   *\n   * @since 6.0.0\n   */\n  authenticatedSignedWrites: boolean;\n  /**\n   * Whether or not the characteristic supports extended properties.\n   *\n   * @since 6.0.0\n   */\n  extendedProperties: boolean;\n  /**\n   * Whether or not the characteristic supports reliable writes.\n   *\n   * @since 6.0.0\n   */\n  notifyEncryptionRequired: boolean;\n  /**\n   * Whether or not the characteristic supports writable auxiliaries.\n   *\n   * @since 6.0.0\n   */\n  indicateEncryptionRequired: boolean;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface Descriptor {\n  /**\n   * The UUID of the descriptor.\n   *\n   * @since 6.0.0\n   * @example \"00002A29-0000-1000-8000-00805F9B34FB\"\n   */\n  id: string;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface Device {\n  /**\n   * The UUID of the connected device.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  id: string;\n  /**\n   * The name of the connected device.\n   *\n   * @since 6.0.0\n   * @example \"My Device\"\n   */\n  name?: string;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface Service {\n  /**\n   * The UUID of the service.\n   *\n   * @since 6.0.0\n   * @example \"0000180A-0000-1000-8000-00805F9B34FB\"\n   */\n  id: string;\n  /**\n   * The characteristics of the service.\n   *\n   * @since 6.0.0\n   */\n  characteristics: Characteristic[];\n}\n\n/**\n * @since 6.0.0\n */\nexport interface PermissionStatus {\n  /**\n   * Permission state for using bluetooth.\n   *\n   * Only available on iOS.\n   *\n   * @since 6.0.0\n   */\n  bluetooth?: PermissionState;\n  /**\n   * Permission state for connecting to a BLE device.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  bluetoothConnect?: PermissionState;\n  /**\n   * Permission state for scanning for BLE devices.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  bluetoothScan?: PermissionState;\n  /**\n   * Permission state for using location services.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  location?: PermissionState;\n  /**\n   * Permission state for using notifications.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  notifications?: PermissionState;\n}\n\nexport interface DeviceScannedEvent {\n  /**\n   * The address of the scanned device.\n   *\n   * @since 6.0.0\n   * @example \"00:00:00:00:00:00\"\n   */\n  id: string;\n  /**\n   * The name of the scanned device.\n   *\n   * @since 6.0.0\n   * @example \"My Device\"\n   */\n  name?: string;\n  /**\n   * The RSSI value of the scanned device.\n   *\n   * Only available on iOS.\n   *\n   * @since 6.0.0\n   * @example -50\n   */\n  rssi?: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface IBluetoothLowEnergyUtils {\n  /**\n   * Convert a byte array to a hex string.\n   *\n   * @since 6.0.0\n   */\n  convertBytesToHex(options: ConvertBytesToHexOptions): { hex: string };\n  /**\n   * Convert a hex string to a byte array.\n   *\n   * @since 6.0.0\n   */\n  convertHexToBytes(options: ConvertHexToBytesOptions): { bytes: number[] };\n}\n\n/**\n * @since 6.0.0\n */\nexport interface ConvertBytesToHexOptions {\n  /**\n   * The byte array to convert to a hex string.\n   *\n   * @since 6.0.0\n   */\n  bytes: number[];\n  /**\n   * The text to prepend to the hex string.\n   *\n   * @since 6.0.0\n   * @default '0x'\n   */\n  start?: string;\n  /**\n   * The separator to use between each byte.\n   *\n   * @since 6.0.0\n   * @default ''\n   * @example ':'\n   */\n  separator?: string;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface ConvertHexToBytesOptions {\n  /**\n   * The hex string to convert to a byte array.\n   *\n   * @since 6.0.0\n   */\n  hex: string;\n  /**\n   * The text to remove from the beginning of the hex string.\n   *\n   * @since 6.0.0\n   * @default '0x'\n   */\n  start?: string;\n  /**\n   * The separator which is used between each byte.\n   *\n   * @since 6.0.0\n   * @default ''\n   * @example ':'\n   */\n  separator?: string;\n}\n\n/**\n * @since 6.0.0\n */\nexport enum ConnectionPriority {\n  /**\n   * Balanced connection priority.\n   *\n   * @since 6.0.0\n   * @see https://developer.android.com/reference/android/bluetooth/BluetoothGatt#CONNECTION_PRIORITY_BALANCED\n   */\n  BALANCED = 0,\n  /**\n   * High connection priority.\n   *\n   * @since 6.0.0\n   * @see https://developer.android.com/reference/android/bluetooth/BluetoothGatt#CONNECTION_PRIORITY_HIGH\n   */\n  HIGH = 1,\n  /**\n   * Low power connection priority.\n   *\n   * @since 6.0.0\n   * @see https://developer.android.com/reference/android/bluetooth/BluetoothGatt#CONNECTION_PRIORITY_LOW_POWER\n   */\n  LOW_POWER = 2,\n  /**\n   * Digital Car Key connection priority.\n   *\n   * @since 6.0.0\n   * @see https://developer.android.com/reference/android/bluetooth/BluetoothGatt#CONNECTION_PRIORITY_DCK\n   */\n  PRIORITY_DCK = 3,\n}\n"]}