{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PermissionState, PluginListenerHandle } from '@capacitor/core';\n\nexport interface NfcPlugin {\n  /**\n   * Start a scan session.\n   * Only one session can be active at a time.\n   *\n   * Stop the session as soon as you are done using `stopScanSession(...)`.\n   *\n   * On iOS, this will trigger the NFC Reader Session alert.\n   *\n   * @since 0.0.1\n   */\n  startScanSession(options?: StartScanSessionOptions): Promise<void>;\n  /**\n   * Stop the active scan session.\n   *\n   * @since 0.0.1\n   */\n  stopScanSession(options?: StopScanSessionOptions): Promise<void>;\n  /**\n   * Write to a NFC tag.\n   *\n   * This method must be called from within a `nfcTagScanned` handler.\n   *\n   * @since 0.0.1\n   */\n  write(options: WriteOptions): Promise<void>;\n  /**\n   * Make a NFC tag readonly.\n   *\n   * This method must be called from within a `nfcTagScanned` handler.\n   *\n   * **Attention:** This is permanent and can not be undone.\n   *\n   * @since 0.0.1\n   */\n  makeReadOnly(): Promise<void>;\n  /**\n   * Erase the NFC tag by writing an empty NDEF message.\n   *\n   * This method must be called from within a `nfcTagScanned` handler.\n   *\n   * @since 0.3.0\n   */\n  erase(): Promise<void>;\n  /**\n   * Format the NFC tag as NDEF and write an empty NDEF message.\n   *\n   * This method must be called from within a `nfcTagScanned` handler.\n   *\n   * Only available on Android.\n   *\n   * @since 0.3.0\n   */\n  format(): Promise<void>;\n  /**\n   * Send raw command to the tag and receive the response.\n   *\n   * This method must be called from within a `nfcTagScanned` handler.\n   *\n   * On **Android**, the tag must be connected with `connect()` first.\n   *\n   * ⚠️ **Experimental:** This method could not be tested extensively yet.\n   * Please let us know if you discover any issues!\n   *\n   * ⚠️ **Attention**: A bad command can damage the tag forever.\n   * Please read the Android and iOS documentation linked below first.\n   *\n   * More information on how to use this method on **Android**: https://bit.ly/3ywSkvT\n   *\n   * More information on how to use this method on **iOS** with...\n   * - ISO 15693-3: https://apple.co/3Lliaum\n   * - FeliCa: https://apple.co/3LpvRs6\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 0.3.0\n   */\n  transceive(options: TransceiveOptions): Promise<TransceiveResult>;\n  /**\n   * Connect to the tag and enable I/O operations.\n   *\n   * This method must be called from within a `nfcTagScanned` handler.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  connect(options: ConnectOptions): Promise<void>;\n  /**\n   * Close the connection to the tag.\n   *\n   * This method must be called from within a `nfcTagScanned` handler.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  close(): Promise<void>;\n  /**\n   * Returns whether or not NFC is supported.\n   *\n   * @since 0.0.1\n   */\n  isSupported(): Promise<IsSupportedResult>;\n  /**\n   * Returns whether or not NFC is enabled.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  isEnabled(): Promise<IsEnabledResult>;\n  /**\n   * Opens the NFC device settings so that the user can enable or disable NFC.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  openSettings(): Promise<void>;\n  /**\n   * Returns information regarding Nfc antennas on the device such as their relative positioning on the device.\n   *\n   * Only available on Android.\n   *\n   * @since 6.1.0\n   */\n  getAntennaInfo(): Promise<GetAntennaInfoResult>;\n  /**\n   * Set a custom message, which is displayed in the NFC Reader Session alert.\n   *\n   * Only available on iOS.\n   *\n   * @since 6.2.0\n   * @see https://developer.apple.com/documentation/corenfc/nfcreadersession/2919987-alertmessage\n   */\n  setAlertMessage(options: SetAlertMessageOptions): Promise<void>;\n  /**\n   * Check permission for reading and writing NFC tags.\n   *\n   * This method is only needed on Web.\n   * On Android and iOS, `granted` is always returned.\n   *\n   * @since 0.0.1\n   */\n  checkPermissions(): Promise<PermissionResult>;\n  /**\n   * Request permission for reading and writing NFC tags.\n   *\n   * This method is only needed on Web.\n   * On Android and iOS, `granted` is always returned.\n   *\n   * @since 0.0.1\n   */\n  requestPermissions(): Promise<PermissionResult>;\n  /**\n   * Called when a new NFC tag is scanned.\n   *\n   * @since 0.0.1\n   */\n  addListener(\n    eventName: 'nfcTagScanned',\n    listenerFunc: (event: NfcTagScannedEvent) => void\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Called when the scan session was canceled.\n   *\n   * Only available on iOS.\n   *\n   * @since 0.0.1\n   */\n  addListener(eventName: 'scanSessionCanceled', listenerFunc: () => void): Promise<PluginListenerHandle>;\n  /**\n   * Called when an error occurs during the scan session.\n   *\n   * @since 0.0.1\n   */\n  addListener(\n    eventName: 'scanSessionError',\n    listenerFunc: (event: ScanSessionErrorEvent) => void\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Remove all listeners for this plugin.\n   *\n   * @since 0.0.1\n   */\n  removeAllListeners(): Promise<void>;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface StartScanSessionOptions {\n  /**\n   * A custom message, which is displayed in the NFC Reader Session alert.\n   *\n   * Only available on iOS.\n   *\n   * @since 0.0.1\n   * @example 'Hold your iPhone near the NFC tag.'\n   * @see https://developer.apple.com/documentation/corenfc/nfcreadersession/2919987-alertmessage\n   */\n  alertMessage?: string;\n  /**\n   * The NFC tag technologies to filter on in this session.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  techTypes?: NfcTagTechType[];\n  /**\n   * Mime types to filter on in this session.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  mimeTypes?: string[];\n  /**\n   * Type of tags to detect during a polling sequence.\n   *\n   * Only available on iOS.\n   *\n   * @default [PollingOption.iso14443, PollingOption.iso15693]\n   * @since 0.2.0\n   */\n  pollingOptions?: PollingOption[];\n}\n\n/**\n * @since 0.0.1\n */\nexport interface StopScanSessionOptions {\n  /**\n   * A custom error message, which is displayed in the NFC Reader Session alert.\n   *\n   * Only available on iOS.\n   *\n   * @since 0.0.1\n   */\n  errorMessage?: string;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface WriteOptions {\n  /**\n   * The NDEF message to write.\n   *\n   * @since 0.0.1\n   */\n  message: NdefMessage;\n}\n\n/**\n * @since 0.3.0\n */\nexport interface TransceiveOptions {\n  /**\n   * The NFC tag technology to connect with.\n   *\n   * Only available on iOS.\n   *\n   * @since 0.3.0\n   */\n  techType?: NfcTagTechType;\n  /**\n   * Bytes to send.\n   *\n   * @since 0.3.0\n   */\n  data: number[];\n  /**\n   * The request flags for the NFC tag technology type `NfcV` (ISO 15693-3).\n   *\n   * Only available on iOS 14+\n   *\n   * @since 0.3.0\n   */\n  iso15693RequestFlags?: Iso15693RequestFlag[];\n  /**\n   * The custom command code defined by the IC manufacturer for the NFC tag\n   * technology type `NfcV` (ISO 15693-3).\n   * Valid range is 0xA0 to 0xDF inclusively, 0x23 is also supported.\n   *\n   * Only available on iOS 14+\n   *\n   * @since 0.3.0\n   */\n  iso15693CommandCode?: number;\n}\n\n/**\n * @since 0.3.0\n */\nexport interface TransceiveResult {\n  /**\n   * Bytes received in response.\n   *\n   * @since 0.3.0\n   */\n  response: number[];\n}\n\n/**\n * @since 6.0.0\n */\nexport interface ConnectOptions {\n  /**\n   * The NFC tag technology to connect with.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  techType: NfcTagTechType;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface NfcTagScannedEvent {\n  /**\n   * The scanned NFC tag.\n   *\n   * @since 0.0.1\n   */\n  nfcTag: NfcTag;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface ScanSessionErrorEvent {\n  /**\n   * The error message.\n   *\n   * @since 0.0.1\n   */\n  message: string;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface NfcTag {\n  /**\n   * The ATQA/SENS_RES bytes of an NFC A tag.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  atqa?: number[];\n  /**\n   * The Application Data bytes from ATQB/SENSB_RES of an NFC B tag.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 0.0.1\n   */\n  applicationData?: number[];\n  /**\n   * The barcode bytes of an NfcBarcode tag.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  barcode?: number[];\n  /**\n   * Whether the NDEF tag can be made read-only or not.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  canMakeReadOnly?: boolean;\n  /**\n   * The DSF ID bytes of an NFC V tag.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  dsfId?: number[];\n  /**\n   * The higher layer response bytes of an ISO-DEP tag.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  hiLayerResponse?: number[];\n  /**\n   * The historical bytes of an ISO-DEP tag.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 0.0.1\n   */\n  historicalBytes?: number[];\n  /**\n   * The tag identifier (low level serial number)\n   * which is used for anti-collision and identification.\n   *\n   * @since 0.0.1\n   */\n  id?: number[];\n  /**\n   * Whether the NDEF tag is writable or not.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 0.0.1\n   */\n  isWritable?: boolean;\n  /**\n   * The Manufacturer bytes of an NFC F tag.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 0.0.1\n   */\n  manufacturer?: number[];\n  /**\n   * The maximum NDEF message size in bytes.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 0.0.1\n   */\n  maxSize?: number;\n  /**\n   * The NDEF-formatted message.\n   *\n   * @since 0.0.1\n   */\n  message?: NdefMessage;\n  /**\n   * The Protocol Info bytes from ATQB/SENSB_RES of an NFC B tag.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  protocolInfo?: number[];\n  /**\n   * The Response Flag bytes of an NFC V tag.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  responseFlags?: number[];\n  /**\n   * The SAK/SEL_RES bytes of an NFC A tag.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  sak?: number[];\n  /**\n   * The System Code bytes of an NFC F tag.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 0.0.1\n   */\n  systemCode?: number[];\n  /**\n   * The technologies available in this tag.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 0.0.1\n   */\n  techTypes?: NfcTagTechType[];\n  /**\n   * The NDEF tag type.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 0.0.1\n   */\n  type?: NfcTagType;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface NdefMessage {\n  /**\n   * The records of the NDEF message.\n   *\n   * @since 0.0.1\n   */\n  records: NdefRecord[];\n}\n\n/**\n * @since 0.0.1\n */\nexport interface NdefRecord {\n  /**\n   * The record identifier as byte array.\n   *\n   * @since 0.0.1\n   */\n  id?: number[];\n  /**\n   * The payload field data as byte array.\n   *\n   * @since 0.0.1\n   */\n  payload?: number[];\n  /**\n   * The record type name format which indicates the structure of\n   * the value of the `type` field.\n   *\n   * @since 0.0.1\n   */\n  tnf: TypeNameFormat;\n  /**\n   * The type of the record payload.\n   * This should be used in conjunction with the `tnf` field to determine\n   * the payload format.\n   *\n   * @since 0.0.1\n   */\n  type?: number[];\n}\n\n/**\n * @since 0.0.1\n */\nexport enum TypeNameFormat {\n  /**\n   * An empty record with no type or payload.\n   *\n   * @since 0.0.1\n   */\n  Empty = 0,\n  /**\n   * A predefined type defined in the RTD specification of the NFC Forum.\n   *\n   * @since 0.0.1\n   */\n  WellKnown = 1,\n  /**\n   * An Internet media type as defined in RFC 2046.\n   *\n   * @since 0.0.1\n   */\n  MimeMedia = 2,\n  /**\n   * A URI as defined in RFC 3986.\n   *\n   * @since 0.0.1\n   */\n  AbsoluteUri = 3,\n  /**\n   * A user-defined value that is based on the rules of the\n   * NFC Forum Record Type Definition specification.\n   *\n   * @since 0.0.1\n   */\n  External = 4,\n  /**\n   * Type is unknown.\n   *\n   * @since 0.0.1\n   */\n  Unknown = 5,\n  /**\n   * Indicates the payload is an intermediate or final chunk\n   * of a chunked NDEF Record.\n   *\n   * @since 0.0.1\n   */\n  Unchanged = 6,\n}\n\n/**\n * @since 0.0.1\n */\nexport enum RecordTypeDefinition {\n  /**\n   * @since 0.0.1\n   */\n  AndroidApp = 'android.com:pkg',\n  /**\n   * @since 0.0.1\n   */\n  AlternativeCarrier = 'ac',\n  /**\n   * @since 0.0.1\n   */\n  HandoverCarrier = 'Hc',\n  /**\n   * @since 0.0.1\n   */\n  HandoverRequest = 'Hr',\n  /**\n   * @since 0.0.1\n   */\n  HandoverSelect = 'Hs',\n  /**\n   * @since 0.0.1\n   */\n  SmartPoster = 'Sp',\n  /**\n   * @since 0.0.1\n   */\n  Text = 'T',\n  /**\n   * @since 0.0.1\n   */\n  Uri = 'U',\n}\n\n/**\n * @since 0.0.1\n */\nexport enum NfcTagTechType {\n  /**\n   * The NFC-A (ISO 14443-3A) tag technology.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  NfcA = 'NFC_A',\n  /**\n   * The NFC-B (ISO 14443-3B) tag technology.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  NfcB = 'NFC_B',\n  /**\n   * The NFC-F (JIS 6319-4) tag technology.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 0.0.1\n   */\n  NfcF = 'NFC_F',\n  /**\n   * The NFC-V (ISO 15693) tag technology.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 0.0.1\n   */\n  NfcV = 'NFC_V',\n  /**\n   * The ISO-DEP (ISO 14443-4) tag technology.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  IsoDep = 'ISO_DEP',\n  /**\n   * The ISO 7816 tag technology.\n   *\n   * Only available on iOS.\n   *\n   * @since 5.1.0\n   */\n  Iso7816 = 'ISO_7816',\n  /**\n   * The NDEF tag technology.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  Ndef = 'NDEF',\n  /**\n   * The MIFARE Classic tag technology.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  MifareClassic = 'MIFARE_CLASSIC',\n  /**\n   * The MIFARE Desfire tag technology.\n   *\n   * Only available on iOS.\n   *\n   * @since 5.1.0\n   */\n  MifareDesfire = 'MIFARE_DESFIRE',\n  /**\n   * The MIFARE Plus tag technology.\n   *\n   * Only available on iOS.\n   *\n   * @since 5.1.0\n   */\n  MifarePlus = 'MIFARE_PLUS',\n  /**\n   * The MIFARE Ultralight tag technology.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 0.0.1\n   */\n  MifareUltralight = 'MIFARE_ULTRALIGHT',\n  /**\n   * The technology of a tag containing just a barcode.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  NfcBarcode = 'NFC_BARCODE',\n  /**\n   * The NDEF formatable tag technology.\n   *\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  NdefFormatable = 'NDEF_FORMATABLE',\n}\n\n/**\n * @since 0.0.1\n */\nexport enum NfcTagType {\n  /**\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  NfcForumType1 = 'NFC_FORUM_TYPE_1',\n  /**\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  NfcForumType2 = 'NFC_FORUM_TYPE_2',\n  /**\n   * Only available on Android and iOS.\n   *\n   * @since 0.0.1\n   */\n  NfcForumType3 = 'NFC_FORUM_TYPE_3',\n  /**\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  NfcForumType4 = 'NFC_FORUM_TYPE_4',\n  /**\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  MifareClassic = 'MIFARE_CLASSIC',\n  /**\n   * @since 0.0.1\n   * @deprecated Not supported on any platform.\n   */\n  MifareDesfire = 'MIFARE_DESFIRE',\n  /**\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  MifarePlus = 'MIFARE_PLUS',\n  /**\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  MifarePro = 'MIFARE_PRO',\n  /**\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  MifareUltralight = 'MIFARE_ULTRALIGHT',\n  /**\n   * Only available on Android.\n   *\n   * @since 0.0.1\n   */\n  MifareUltralightC = 'MIFARE_ULTRALIGHT_C',\n}\n\n/**\n * @since 0.0.1\n */\nexport interface IsSupportedResult {\n  /**\n   * @since 0.0.1\n   */\n  isSupported: boolean;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface IsEnabledResult {\n  /**\n   * @since 0.0.1\n   */\n  isEnabled: boolean;\n}\n\n/**\n * @since 6.1.0\n */\nexport interface GetAntennaInfoResult {\n  /**\n   * The available NFC antennas on the device.\n   *\n   * @since 6.1.0\n   */\n  availableAntennas: Antenna[];\n  /**\n   * The height of the device in millimeters.\n   *\n   * @since 6.1.0\n   * @example 200\n   */\n  deviceHeight: number;\n  /**\n   * The width of the device in millimeters.\n   *\n   * @since 6.1.0\n   * @example 100\n   */\n  deviceWidth: number;\n  /**\n   * Whether or not the device is foldable.\n   *\n   * @since 6.1.0\n   * @example true\n   */\n  isDeviceFoldable: boolean;\n}\n\n/**\n * @since 6.2.0\n */\nexport interface SetAlertMessageOptions {\n  /**\n   * The custom message, which is displayed in the NFC Reader Session alert.\n   *\n   * @since 6.2.0\n   *\n   * @example 'Hold your iPhone near the NFC tag.'\n   */\n  message: string;\n}\n\n/**\n * @since 6.1.0\n */\nexport interface Antenna {\n  /**\n   * The location of the NFC antenna on the X axis in millimeters.\n   *\n   * @since 6.1.0\n   * @example 50\n   */\n  locationX: number;\n  /**\n   * The location of the NFC antenna on the Y axis in millimeters.\n   *\n   * @since 6.1.0\n   * @example 100\n   */\n  locationY: number;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface PermissionResult {\n  /**\n   * Permission state for reading and writing NFC tags.\n   *\n   * @since 0.0.1\n   */\n  nfc: PermissionState;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface INfcUtils {\n  /**\n   * Convert a byte array to a hex string.\n   *\n   * @since 0.3.1\n   */\n  convertBytesToHex(options: ConvertBytesToHexOptions): { hex: string };\n  /**\n   * Convert a byte array to a string.\n   *\n   * @since 0.0.1\n   */\n  convertBytesToString(options: ConvertBytesToStringOptions): { text: string };\n  /**\n   * Convert a hex string to a byte array.\n   *\n   * @since 0.3.1\n   */\n  convertHexToBytes(options: ConvertHexToBytesOptions): { bytes: number[] };\n  /**\n   * Convert a hex string to a number.\n   *\n   * @since 0.3.1\n   */\n  convertHexToNumber(options: ConvertHexToNumberOptions): { number: number };\n  /**\n   * Convert a number to a hex string.\n   *\n   * @since 0.3.1\n   */\n  convertNumberToHex(options: ConvertNumberToHexOptions): { hex: string };\n  /**\n   * Convert a string to a byte array.\n   *\n   * @since 0.0.1\n   */\n  convertStringToBytes(options: ConvertStringToBytesOptions): { bytes: number[] };\n  /**\n   * Create a NDEF record.\n   *\n   * @since 0.0.1\n   */\n  createNdefRecord(options: CreateNdefRecordOptions): CreateNdefRecordResult;\n  /**\n   * Create an empty NDEF record.\n   *\n   * @since 0.0.1\n   */\n  createNdefEmptyRecord(): CreateNdefRecordResult;\n  /**\n   * Create a NDEF text record.\n   *\n   * @since 0.0.1\n   */\n  createNdefTextRecord(options: CreateNdefTextRecordOptions): CreateNdefRecordResult;\n  /**\n   * Create a NDEF URI record.\n   *\n   * @since 0.0.1\n   */\n  createNdefUriRecord(options: CreateNdefUriRecordOptions): CreateNdefRecordResult;\n  /**\n   * Create a NDEF absolute URI record.\n   *\n   * @since 0.0.1\n   */\n  createNdefAbsoluteUriRecord(options: CreateNdefAbsoluteUriRecordOptions): CreateNdefRecordResult;\n  /**\n   * Create a NDEF mime media record.\n   *\n   * @since 0.0.1\n   */\n  createNdefMimeMediaRecord(options: CreateNdefMimeMediaRecordOptions): CreateNdefRecordResult;\n  /**\n   * Create a NDEF external type record.\n   *\n   * @since 0.0.1\n   */\n  createNdefExternalRecord(options: CreateNdefExternalRecordOptions): CreateNdefRecordResult;\n  /**\n   * Get the identifier code from a NDEF URI record.\n   *\n   * This method assumes that the record has a valid URI identifier code.\n   *\n   * @since 0.3.1\n   */\n  getIdentifierCodeFromNdefUriRecord(options: GetIdentifierCodeFromNdefUriRecordOptions): {\n    identifierCode: UriIdentifierCode | undefined;\n  };\n  /**\n   * Get the language code from a NDEF text record.\n   *\n   * @since 0.0.1\n   */\n  getLanguageFromNdefTextRecord(options: GetLanguageFromNdefTextRecordOptions): { language: string | undefined };\n  /**\n   * Get the text from a NDEF text record.\n   *\n   * @since 0.0.1\n   */\n  getTextFromNdefTextRecord(options: GetTextFromNdefTextRecordOptions): { text: string | undefined };\n  /**\n   * Get the uri from a NDEF URI record.\n   *\n   * This method assumes that the record has a valid URI identifier code.\n   *\n   * @since 0.3.1\n   */\n  getUriFromNdefUriRecord(options: GetIdentifierCodeFromNdefUriRecordOptions): { uri: string | undefined };\n  /**\n   * Map a byte array to a the corresponding NDEF record type.\n   *\n   * @since 0.0.1\n   */\n  mapBytesToRecordTypeDefinition(options: { bytes: number[] }): { type: RecordTypeDefinition | undefined };\n}\n\n/**\n * @since 0.3.1\n */\nexport interface ConvertBytesToHexOptions {\n  /**\n   * The byte array to convert to a hex string.\n   *\n   * @since 0.3.1\n   */\n  bytes: number[];\n  /**\n   * The text to prepend to the hex string.\n   *\n   * @since 0.3.1\n   * @default '0x'\n   */\n  start?: string;\n  /**\n   * The separator to use between each byte.\n   *\n   * @since 0.3.1\n   * @default ''\n   * @example ':'\n   */\n  separator?: string;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface ConvertBytesToStringOptions {\n  /**\n   * The byte array to convert to a string.\n   *\n   * @since 0.0.1\n   */\n  bytes: number[];\n}\n\n/**\n * @since 0.3.1\n */\nexport interface ConvertHexToBytesOptions {\n  /**\n   * The hex string to convert to a byte array.\n   *\n   * @since 0.3.1\n   */\n  hex: string;\n  /**\n   * The text to remove from the beginning of the hex string.\n   *\n   * @since 0.3.1\n   * @default '0x'\n   */\n  start?: string;\n  /**\n   * The separator which is used between each byte.\n   *\n   * @since 0.3.1\n   * @default ''\n   * @example ':'\n   */\n  separator?: string;\n}\n\n/**\n * @since 0.3.1\n */\nexport interface ConvertHexToNumberOptions {\n  /**\n   * The hex string to convert to a number array.\n   *\n   * @since 0.3.1\n   */\n  hex: string;\n}\n\n/**\n * @since 0.3.1\n */\nexport interface ConvertNumberToHexOptions {\n  /**\n   * The number to convert to a hex string.\n   *\n   * @since 0.3.1\n   */\n  number: number;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface ConvertStringToBytesOptions {\n  /**\n   * The string to convert to a byte array.\n   *\n   * @since 0.0.1\n   */\n  text: string;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface CreateNdefRecordOptions {\n  /**\n   * @since 0.0.1\n   */\n  id?: number[] | string;\n  /**\n   * @since 0.0.1\n   */\n  payload?: number[] | string;\n  /**\n   * @since 0.0.1\n   */\n  tnf?: TypeNameFormat;\n  /**\n   * @since 0.0.1\n   */\n  type?: number[] | string | RecordTypeDefinition;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface CreateNdefRecordResult {\n  /**\n   * @since 0.0.1\n   */\n  record: NdefRecord;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface CreateNdefTextRecordOptions {\n  /**\n   * @since 0.0.1\n   */\n  id?: number[] | string;\n  /**\n   * @since 0.0.1\n   */\n  text: number[] | string;\n  /**\n   * The ISO/IANA language identifier.\n   *\n   * @default en\n   * @since 0.0.1\n   */\n  language?: number[] | string;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface CreateNdefUriRecordOptions {\n  /**\n   * @since 0.0.1\n   */\n  id?: number[] | string;\n  /**\n   * @since 0.0.1\n   * @example capacitorjs.com\n   */\n  uri: number[] | string;\n  /**\n   * The URI identifier code.\n   *\n   * @default UriIdentifierCode.None\n   * @since 0.3.1\n   */\n  identifierCode?: UriIdentifierCode | number;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface CreateNdefAbsoluteUriRecordOptions {\n  /**\n   * @since 0.0.1\n   */\n  id?: number[] | string;\n  /**\n   * @since 0.0.1\n   */\n  uri: number[] | string;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface CreateNdefMimeMediaRecordOptions {\n  /**\n   * @since 0.0.1\n   */\n  id?: number[] | string;\n  /**\n   * A valid MIME type.\n   *\n   * @example application/json\n   * @since 0.0.1\n   */\n  mimeType: number[] | string;\n  /**\n   * The MIME data as bytes or string.\n   *\n   * @since 0.0.1\n   */\n  mimeData?: number[] | string;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface CreateNdefExternalRecordOptions {\n  /**\n   * @since 0.0.1\n   */\n  id?: number[] | string;\n  /**\n   * @since 0.0.1\n   */\n  payload?: number[] | string;\n  /**\n   * The domain-name of issuing organization.\n   *\n   * @example com.example\n   * @since 0.0.1\n   */\n  domain: number[] | string;\n  /**\n   * The domain-specific type of data.\n   *\n   * @example externalType\n   * @since 0.0.1\n   */\n  type: number[] | string;\n}\n\n/**\n * @since 0.3.1\n */\nexport interface GetIdentifierCodeFromNdefUriRecordOptions {\n  /**\n   * @since 0.3.1\n   */\n  record: NdefRecord;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface GetLanguageFromNdefTextRecordOptions {\n  /**\n   * @since 0.0.1\n   */\n  record: NdefRecord;\n}\n\n/**\n * @since 0.0.1\n */\nexport interface GetTextFromNdefTextRecordOptions {\n  /**\n   * @since 0.0.1\n   */\n  record: NdefRecord;\n}\n\n/**\n * @since 0.2.0\n */\nexport enum PollingOption {\n  /**\n   * The option for detecting ISO 7816-compatible and MIFARE tags.\n   *\n   * @since 0.2.0\n   */\n  iso14443 = 'iso14443',\n  /**\n   * The option for detecting ISO 15693 tags.\n   *\n   * @since 0.2.0\n   */\n  iso15693 = 'iso15693',\n  /**\n   * The option for detecting FeliCa tags.\n   *\n   * @since 0.2.0\n   */\n  iso18092 = 'iso18092',\n}\n\n/**\n * @since 0.3.0\n */\nexport enum Iso15693RequestFlag {\n  /**\n   * @since 0.3.0\n   */\n  address = 'address',\n  /**\n   * @since 0.3.0\n   */\n  commandSpecificBit8 = 'commandSpecificBit8',\n  /**\n   * @since 0.3.0\n   */\n  dualSubCarriers = 'dualSubCarriers',\n  /**\n   * @since 0.3.0\n   */\n  highDataRate = 'highDataRate',\n  /**\n   * @since 0.3.0\n   */\n  option = 'option',\n  /**\n   * @since 0.3.0\n   */\n  protocolExtension = 'protocolExtension',\n  /**\n   * @since 0.3.0\n   */\n  select = 'select',\n}\n\n/**\n * @since 0.3.1\n *\n * URI identifier codes as defined in the NFC Forum URI Record Type Definition.\n */\nexport enum UriIdentifierCode {\n  /**\n   * No prepending is done.\n   *\n   * @since 0.3.1\n   */\n  None = 0,\n  /**\n   * `http://www.` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  HttpWww = 1,\n  /**\n   * `https://www.` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  HttpsWww = 2,\n  /**\n   * `http:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Http = 3,\n  /**\n   * `https:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Https = 4,\n  /**\n   * `tel:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Tel = 5,\n  /**\n   * `mailto:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Mailto = 6,\n  /**\n   * `ftp://anonymous:anonymous@` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  FtpAnonymous = 7,\n  /**\n   * `ftp://ftp.` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  FtpFtp = 8,\n  /**\n   * `ftps://` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Ftps = 9,\n  /**\n   * `sftp://` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Sftp = 10,\n  /**\n   * `smb://` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Smb = 11,\n  /**\n   * `nfs://` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Nfs = 12,\n  /**\n   * `ftp://` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Ftp = 13,\n  /**\n   * `dav://` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Dav = 14,\n  /**\n   * `news:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  News = 15,\n  /**\n   * `telnet://` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Telnet = 16,\n  /**\n   * `imap:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Imap = 17,\n  /**\n   * `rtsp://` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Rtsp = 18,\n  /**\n   * `urn:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Urn = 19,\n  /**\n   * `pop:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Pop = 20,\n  /**\n   * `sip:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Sip = 21,\n  /**\n   * `sips:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Sips = 22,\n  /**\n   * `tftp:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Tftp = 23,\n  /**\n   * `btspp://` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Btspp = 24,\n  /**\n   * `btl2cap://` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Btl2cap = 25,\n  /**\n   * `btgoep://` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Btgoep = 26,\n  /**\n   * `tcpobex://` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Tcpobex = 27,\n  /**\n   * `irdaobex://` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  Irdaobex = 28,\n  /**\n   * `file://` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  File = 29,\n  /**\n   * `urn:epc:id:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  UrnEpcId = 30,\n  /**\n   * `urn:epc:tag:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  UrnEpcTag = 31,\n  /**\n   * `urn:epc:pat:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  UrnEpcPat = 32,\n  /**\n   * `urn:epc:raw:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  UrnEpcRaw = 33,\n  /**\n   * `urn:epc:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  UrnEpc = 34,\n  /**\n   * `urn:nfc:` is prepended to the URI.\n   *\n   * @since 0.3.1\n   */\n  UrnNfc = 35,\n}\n"]}