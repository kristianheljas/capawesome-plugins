{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAkB/E,OAAO,EAAE,oBAAoB,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AACrE,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAEnC,MAAM,OAAO,MAAO,SAAQ,SAAS;IAArC;;QAGmB,QAAG,GAAG,WAAW,CAAC;QAClB,iBAAY,GAAG,YAAY,IAAI,MAAM,CAAC;QACtC,aAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;IAwU7C,CAAC;IAnUQ,KAAK,CAAC,gBAAgB;QAC3B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;SACzC;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;QACnC,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;QAC7C,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;QACpE,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;QAC5E,IAAI,CAAC,UAAU,CAAC,cAAc,GAAG,GAAG,EAAE;YACpC,IAAI,CAAC,2BAA2B,EAAE,CAAC;QACrC,CAAC,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,eAAe;;QAC1B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;SACzC;QACD,MAAA,IAAI,CAAC,eAAe,0CAAE,KAAK,GAAG;QAC9B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,KAAK,CAAC,OAAqB;QACtC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;SACzC;QACD,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YAC7C,MAAM,IAAI,CAAC,6BAA6B,EAAE,CAAC;SAC5C;QACD,MAAM,OAAO,GAAoB;YAC/B,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,wCAAwC,CAAC,MAAM,CAAC,CAAC;SACxG,CAAC;QACF,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IACjG,CAAC;IAEM,KAAK,CAAC,YAAY;QACvB,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,cAAc,IAAI,UAAU,CAAC,SAAS,CAAC,EAAE;YACnE,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;SACzC;QACD,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YAC7C,MAAM,IAAI,CAAC,6BAA6B,EAAE,CAAC;SAC5C;QACD,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;IAC9E,CAAC;IAEM,KAAK,CAAC,KAAK;QAChB,MAAM,IAAI,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,GAAG,EAAE,cAAc,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9E,CAAC;IAEM,KAAK,CAAC,MAAM;QACjB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,QAA2B;QACjD,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,QAAwB;QAC3C,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,KAAK;QAChB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,WAAW;QACtB,OAAO;YACL,WAAW,EAAE,IAAI,CAAC,YAAY;SAC/B,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,SAAS;QACpB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,YAAY;QACvB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,cAAc;QACzB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,eAAe,CAAC,QAA6B;QACxD,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,gBAAgB;QAC3B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;SACzC;QACD,MAAM,cAAc,GAAG,KAAuB,CAAC;QAC/C,MAAM,mBAAmB,GAAG,MAAM,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC;QACxF,OAAO,EAAE,GAAG,EAAE,mBAAmB,CAAC,KAAK,EAAE,CAAC;IAC5C,CAAC;IAEM,KAAK,CAAC,kBAAkB;QAC7B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;SACzC;QACD,IAAI;YACF,MAAM,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;YACpC,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;YAC9C,MAAM,UAAU,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;YAC1D,eAAe,CAAC,KAAK,EAAE,CAAC;SACzB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,4BAA4B,EAAE,KAAK,CAAC,CAAC;SAC/D;QACD,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;IACjC,CAAC;IAEO,wBAAwB,CAAC,KAAuB;QACtD,MAAM,MAAM,GAAuB;YACjC,MAAM,EAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;SACvC,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;IAC1D,CAAC;IAEO,2BAA2B;QACjC,MAAM,MAAM,GAA0B;YACpC,OAAO,EAAE,gCAAgC;SAC1C,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;IAC7D,CAAC;IAEO,kBAAkB,CAAC,KAAuB;QAChD,MAAM,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC7F,MAAM,EAAE,GAAG,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC3E,MAAM,MAAM,GAAW;YACrB,EAAE;YACF,OAAO,EAAE,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,OAAO,CAAC;SACrD,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,uBAAuB,CAAC,OAAoB;QAClD,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,0CAA0C,CAAC,MAAM,CAAC,CAAC,CAAC;QACzG,MAAM,MAAM,GAAgB;YAC1B,OAAO;SACR,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,0CAA0C,CAAC,MAAkB;QACnE,MAAM,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACxE,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACtF,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;QACvD,MAAM,GAAG,GAAG,IAAI,CAAC,mCAAmC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAExE,IAAI,OAAO,GAAyB,SAAS,CAAC;QAC9C,IAAI,IAAI,GAAyB,SAAS,CAAC;QAC3C,QAAQ,MAAM,CAAC,UAAU,EAAE;YACzB,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,CAAC,MAAM,CAAC;YACtD,KAAK,MAAM;gBACT,OAAO,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC;oBACxC,EAAE;oBACF,IAAI,EAAE,IAAI,IAAI,EAAE;oBAChB,QAAQ;iBACT,CAAC,CAAC,MAAM,CAAC;YACZ,KAAK,KAAK;gBACR,OAAO,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC;oBACvC,EAAE;oBACF,GAAG,EAAE,IAAI,IAAI,EAAE;iBAChB,CAAC,CAAC,MAAM,CAAC;YACZ,KAAK,cAAc;gBACjB,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;gBACnE,OAAO,GAAG,IAAI,CAAC;gBACf,MAAM;YACR,KAAK,MAAM;gBACT,OAAO,IAAI,CAAC,QAAQ,CAAC,yBAAyB,CAAC;oBAC7C,EAAE;oBACF,QAAQ,EAAE,MAAM,CAAC,SAAS,IAAI,EAAE;oBAChC,QAAQ,EAAE,IAAI,IAAI,EAAE;iBACrB,CAAC,CAAC,MAAM,CAAC;YACZ,KAAK,cAAc;gBACjB,OAAO,IAAI,CAAC,QAAQ,CAAC,2BAA2B,CAAC;oBAC/C,EAAE;oBACF,GAAG,EAAE,IAAI,IAAI,EAAE;iBAChB,CAAC,CAAC,MAAM,CAAC;YACZ,KAAK,SAAS;gBACZ,IAAI,GAAG,SAAS,CAAC;gBACjB,OAAO,GAAG,IAAI,CAAC;gBACf,MAAM;YACR,OAAO,CAAC,CAAC;gBACP,IAAI,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;oBACrC,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;iBAClE;qBAAM;oBACL,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;iBACrD;gBACD,OAAO,GAAG,IAAI,CAAC;aAChB;SACF;QAED,MAAM,MAAM,GAAe;YACzB,EAAE;YACF,OAAO;YACP,GAAG;YACH,IAAI;SACL,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,wCAAwC,CAAC,MAAkB;QACjE,MAAM,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACxE,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC9E,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAE5E,IAAI,IAAuC,CAAC;QAC5C,IAAI,UAAkB,CAAC;QACvB,IAAI,SAA6B,CAAC;QAClC,IAAI,IAAwB,CAAC;QAC7B,QAAQ,MAAM,CAAC,GAAG,EAAE;YAClB,KAAK,cAAc,CAAC,KAAK;gBACvB,UAAU,GAAG,OAAO,CAAC;gBACrB,MAAM;YACR,KAAK,cAAc,CAAC,SAAS,CAAC,CAAC;gBAC7B,IAAI,IAAI,KAAK,oBAAoB,CAAC,IAAI,EAAE;oBACtC,UAAU,GAAG,MAAM,CAAC;oBACpB,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,6BAA6B,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC;oBACxE,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,yBAAyB,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC;oBACtE,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;oBAChE,IAAI,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;iBACpC;qBAAM;oBACL,IAAI,IAAI,KAAK,oBAAoB,CAAC,GAAG,EAAE;wBACrC,UAAU,GAAG,KAAK,CAAC;qBACpB;yBAAM,IAAI,IAAI,KAAK,oBAAoB,CAAC,WAAW,EAAE;wBACpD,UAAU,GAAG,cAAc,CAAC;qBAC7B;yBAAM;wBACL,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;qBAC5C;oBACD,IAAI,GAAG,OAAO,CAAC;iBAChB;gBACD,MAAM;aACP;YACD,KAAK,cAAc,CAAC,SAAS,CAAC,CAAC;gBAC7B,UAAU,GAAG,MAAM,CAAC;gBACpB,SAAS,GAAG,IAAI,CAAC;gBACjB,IAAI,GAAG,OAAO,CAAC;gBACf,MAAM;aACP;YACD,KAAK,cAAc,CAAC,WAAW,CAAC,CAAC;gBAC/B,UAAU,GAAG,cAAc,CAAC;gBAC5B,MAAM,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;gBACtC,MAAM,UAAU,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC5C,IAAI,GAAG,IAAI,QAAQ,CAAC,UAAiB,CAAC,CAAC;gBACvC,MAAM;aACP;YACD,KAAK,cAAc,CAAC,QAAQ,CAAC,CAAC;gBAC5B,UAAU,GAAG,IAAI,IAAI,SAAS,CAAC;gBAC/B,IAAI,GAAG,OAAO,CAAC;gBACf,MAAM;aACP;YACD;gBACE,UAAU,GAAG,SAAS,CAAC;SAC1B;QAED,MAAM,MAAM,GAAmB;YAC7B,EAAE;YACF,IAAI;YACJ,UAAU;YACV,SAAS;YACT,IAAI;SACL,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,mCAAmC,CAAC,UAAkB;QAC5D,QAAQ,UAAU,EAAE;YAClB,KAAK,OAAO;gBACV,OAAO,cAAc,CAAC,KAAK,CAAC;YAC9B,KAAK,MAAM,CAAC;YACZ,KAAK,KAAK,CAAC;YACX,KAAK,cAAc;gBACjB,OAAO,cAAc,CAAC,SAAS,CAAC;YAClC,KAAK,MAAM;gBACT,OAAO,cAAc,CAAC,SAAS,CAAC;YAClC,KAAK,cAAc;gBACjB,OAAO,cAAc,CAAC,WAAW,CAAC;YACpC,KAAK,SAAS;gBACZ,OAAO,cAAc,CAAC,OAAO,CAAC;YAChC,OAAO,CAAC,CAAC;gBACP,IAAI,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;oBAC9B,OAAO,cAAc,CAAC,SAAS,CAAC;iBACjC;gBACD,OAAO,cAAc,CAAC,QAAQ,CAAC;aAChC;SACF;IACH,CAAC;IAEO,oBAAoB,CAAC,IAAY;QACvC,OAAO,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC;YACxC,IAAI;SACL,CAAC,CAAC,KAAK,CAAC;IACX,CAAC;IAEO,oBAAoB,CAAC,KAAe;QAC1C,OAAO,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC;YACxC,KAAK;SACN,CAAC,CAAC,IAAI,CAAC;IACV,CAAC;IAEO,iBAAiB,CAAC,GAAW;QACnC,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC;SACjD;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC;YACrC,GAAG;YACH,SAAS,EAAE,EAAE;YACb,KAAK,EAAE,EAAE;SACV,CAAC,CAAC,KAAK,CAAC;IACX,CAAC;IAEO,0BAA0B;QAChC,OAAO,IAAI,kBAAkB,CAC3B,2DAA2D,EAC3D,aAAa,CAAC,WAAW,CAC1B,CAAC;IACJ,CAAC;IAEO,6BAA6B;QACnC,OAAO,IAAI,kBAAkB,CAAC,oCAAoC,CAAC,CAAC;IACtE,CAAC;;AA3UsB,yBAAkB,GAAG,eAAe,CAAC;AACrC,4BAAqB,GAAG,kBAAkB,CAAC","sourcesContent":["import { CapacitorException, ExceptionCode, WebPlugin } from '@capacitor/core';\n\nimport type {\n  ConnectOptions,\n  GetAntennaInfoResult,\n  IsEnabledResult,\n  IsSupportedResult,\n  NdefMessage,\n  NdefRecord,\n  NfcPlugin,\n  NfcTag,\n  NfcTagScannedEvent,\n  PermissionResult,\n  ScanSessionErrorEvent,\n  TransceiveOptions,\n  TransceiveResult,\n  WriteOptions,\n} from './definitions';\nimport { RecordTypeDefinition, TypeNameFormat } from './definitions';\nimport { NfcUtils } from './utils';\n\nexport class NfcWeb extends WebPlugin implements NfcPlugin {\n  public static readonly nfcTagScannedEvent = 'nfcTagScanned';\n  public static readonly scanSessionErrorEvent = 'scanSessionError';\n  private readonly TAG = 'NfcPlugin';\n  private readonly _isSupported = 'NDEFReader' in window;\n  private readonly nfcUtils = new NfcUtils();\n\n  private ndefReader: NDEFReader | undefined;\n  private abortController: AbortController | undefined;\n\n  public async startScanSession(): Promise<void> {\n    if (!this._isSupported) {\n      throw this.createUnavailableException();\n    }\n    this.ndefReader = new NDEFReader();\n    this.abortController = new AbortController();\n    await this.ndefReader.scan({ signal: this.abortController.signal });\n    this.ndefReader.onreading = (event) => this.handleNfcTagScannedEvent(event);\n    this.ndefReader.onreadingerror = () => {\n      this.handleScanSessionErrorEvent();\n    };\n  }\n\n  public async stopScanSession(): Promise<void> {\n    if (!this._isSupported) {\n      throw this.createUnavailableException();\n    }\n    this.abortController?.abort();\n    this.ndefReader = undefined;\n    this.abortController = undefined;\n  }\n\n  public async write(options: WriteOptions): Promise<void> {\n    if (!this._isSupported) {\n      throw this.createUnavailableException();\n    }\n    if (!this.ndefReader || !this.abortController) {\n      throw this.createSessionMissingException();\n    }\n    const message: NDEFMessageInit = {\n      records: options.message.records.map((record) => this.createNativeNDEFRecordInitFromNdefRecord(record)),\n    };\n    await this.ndefReader.write(message, { signal: this.abortController.signal, overwrite: true });\n  }\n\n  public async makeReadOnly(): Promise<void> {\n    if (!this._isSupported || !('makeReadOnly' in NDEFReader.prototype)) {\n      throw this.createUnavailableException();\n    }\n    if (!this.ndefReader || !this.abortController) {\n      throw this.createSessionMissingException();\n    }\n    await this.ndefReader.makeReadOnly({ signal: this.abortController.signal });\n  }\n\n  public async erase(): Promise<void> {\n    await this.write({ message: { records: [{ tnf: TypeNameFormat.Empty }] } });\n  }\n\n  public async format(): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  public async transceive(_options: TransceiveOptions): Promise<TransceiveResult> {\n    throw this.createUnavailableException();\n  }\n\n  public async connect(_options: ConnectOptions): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  public async close(): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  public async isSupported(): Promise<IsSupportedResult> {\n    return {\n      isSupported: this._isSupported,\n    };\n  }\n\n  public async isEnabled(): Promise<IsEnabledResult> {\n    throw this.createUnavailableException();\n  }\n\n  public async openSettings(): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  public async getAntennaInfo(): Promise<GetAntennaInfoResult> {\n    throw this.createUnavailableException();\n  }\n\n  public async setAlertMessage(_options: { message: string }): Promise<void> {\n    throw this.createUnavailableException();\n  }\n\n  public async checkPermissions(): Promise<PermissionResult> {\n    if (!this._isSupported) {\n      throw this.createUnavailableException();\n    }\n    const permissionName = 'nfc' as PermissionName;\n    const nfcPermissionStatus = await navigator.permissions.query({ name: permissionName });\n    return { nfc: nfcPermissionStatus.state };\n  }\n\n  public async requestPermissions(): Promise<PermissionResult> {\n    if (!this._isSupported) {\n      throw this.createUnavailableException();\n    }\n    try {\n      const ndefReader = new NDEFReader();\n      const abortController = new AbortController();\n      await ndefReader.scan({ signal: abortController.signal });\n      abortController.abort();\n    } catch (error) {\n      console.error(`${this.TAG} requestPermissions error.`, error);\n    }\n    return this.checkPermissions();\n  }\n\n  private handleNfcTagScannedEvent(event: NDEFReadingEvent): void {\n    const result: NfcTagScannedEvent = {\n      nfcTag: this.createNfcTagResult(event),\n    };\n    this.notifyListeners(NfcWeb.nfcTagScannedEvent, result);\n  }\n\n  private handleScanSessionErrorEvent(): void {\n    const result: ScanSessionErrorEvent = {\n      message: 'An unknown error has occurred.',\n    };\n    this.notifyListeners(NfcWeb.scanSessionErrorEvent, result);\n  }\n\n  private createNfcTagResult(event: NDEFReadingEvent): NfcTag {\n    const serialNumber = event.serialNumber ? event.serialNumber.split(':').join('') : undefined;\n    const id = serialNumber ? this.convertHexToBytes(serialNumber) : undefined;\n    const nfcTag: NfcTag = {\n      id,\n      message: this.createNdefMessageResult(event.message),\n    };\n    return nfcTag;\n  }\n\n  private createNdefMessageResult(message: NDEFMessage): NdefMessage {\n    const records = message.records.map((record) => this.createNdefRecordResultFromNativeNDEFRecord(record));\n    const result: NdefMessage = {\n      records,\n    };\n    return result;\n  }\n\n  private createNdefRecordResultFromNativeNDEFRecord(record: NDEFRecord): NdefRecord {\n    const id = record.id ? this.convertStringToBytes(record.id) : undefined;\n    const data = record.data ? Array.from(new Uint8Array(record.data.buffer)) : undefined;\n    const language = record.lang ? record.lang : undefined;\n    const tnf = this.mapNativeRecordTypeToTypeNameFormat(record.recordType);\n\n    let payload: number[] | undefined = undefined;\n    let type: number[] | undefined = undefined;\n    switch (record.recordType) {\n      case 'empty':\n        return this.nfcUtils.createNdefEmptyRecord().record;\n      case 'text':\n        return this.nfcUtils.createNdefTextRecord({\n          id,\n          text: data || [],\n          language,\n        }).record;\n      case 'url':\n        return this.nfcUtils.createNdefUriRecord({\n          id,\n          uri: data || [],\n        }).record;\n      case 'smart-poster':\n        type = this.convertStringToBytes(RecordTypeDefinition.SmartPoster);\n        payload = data;\n        break;\n      case 'mime':\n        return this.nfcUtils.createNdefMimeMediaRecord({\n          id,\n          mimeType: record.mediaType || '',\n          mimeData: data || [],\n        }).record;\n      case 'absolute-url':\n        return this.nfcUtils.createNdefAbsoluteUriRecord({\n          id,\n          uri: data || [],\n        }).record;\n      case 'unknown':\n        type = undefined;\n        payload = data;\n        break;\n      default: {\n        if (record.recordType.startsWith(':')) {\n          type = this.convertStringToBytes(record.recordType.substring(1));\n        } else {\n          type = this.convertStringToBytes(record.recordType);\n        }\n        payload = data;\n      }\n    }\n\n    const result: NdefRecord = {\n      id,\n      payload,\n      tnf,\n      type,\n    };\n    return result;\n  }\n\n  private createNativeNDEFRecordInitFromNdefRecord(record: NdefRecord): NDEFRecordInit {\n    const id = record.id ? this.convertBytesToString(record.id) : undefined;\n    const type = record.type ? this.convertBytesToString(record.type) : undefined;\n    const payload = record.payload ? new Uint8Array(record.payload) : undefined;\n\n    let data: DataView | Uint8Array | undefined;\n    let recordType: string;\n    let mediaType: string | undefined;\n    let lang: string | undefined;\n    switch (record.tnf) {\n      case TypeNameFormat.Empty:\n        recordType = 'empty';\n        break;\n      case TypeNameFormat.WellKnown: {\n        if (type === RecordTypeDefinition.Text) {\n          recordType = 'text';\n          lang = this.nfcUtils.getLanguageFromNdefTextRecord({ record }).language;\n          const text = this.nfcUtils.getTextFromNdefTextRecord({ record }).text;\n          const textAsBytes = text ? this.convertStringToBytes(text) : [];\n          data = new Uint8Array(textAsBytes);\n        } else {\n          if (type === RecordTypeDefinition.Uri) {\n            recordType = 'url';\n          } else if (type === RecordTypeDefinition.SmartPoster) {\n            recordType = 'smart-poster';\n          } else {\n            recordType = type ? ':' + type : 'unknown';\n          }\n          data = payload;\n        }\n        break;\n      }\n      case TypeNameFormat.MimeMedia: {\n        recordType = 'mime';\n        mediaType = type;\n        data = payload;\n        break;\n      }\n      case TypeNameFormat.AbsoluteUri: {\n        recordType = 'absolute-url';\n        const textEncoder = new TextEncoder();\n        const uint8Array = textEncoder.encode(type);\n        data = new DataView(uint8Array as any);\n        break;\n      }\n      case TypeNameFormat.External: {\n        recordType = type || 'unknown';\n        data = payload;\n        break;\n      }\n      default:\n        recordType = 'unknown';\n    }\n\n    const result: NDEFRecordInit = {\n      id,\n      data,\n      recordType,\n      mediaType,\n      lang,\n    };\n    return result;\n  }\n\n  private mapNativeRecordTypeToTypeNameFormat(recordType: string): TypeNameFormat {\n    switch (recordType) {\n      case 'empty':\n        return TypeNameFormat.Empty;\n      case 'text':\n      case 'url':\n      case 'smart-poster':\n        return TypeNameFormat.WellKnown;\n      case 'mime':\n        return TypeNameFormat.MimeMedia;\n      case 'absolute-url':\n        return TypeNameFormat.AbsoluteUri;\n      case 'unknown':\n        return TypeNameFormat.Unknown;\n      default: {\n        if (recordType.startsWith(':')) {\n          return TypeNameFormat.WellKnown;\n        }\n        return TypeNameFormat.External;\n      }\n    }\n  }\n\n  private convertStringToBytes(text: string): number[] {\n    return this.nfcUtils.convertStringToBytes({\n      text,\n    }).bytes;\n  }\n\n  private convertBytesToString(bytes: number[]): string {\n    return this.nfcUtils.convertBytesToString({\n      bytes,\n    }).text;\n  }\n\n  private convertHexToBytes(hex: string): number[] {\n    if (hex.length % 2 !== 0) {\n      throw new Error(NfcUtils.errorInvalidHexString);\n    }\n    return this.nfcUtils.convertHexToBytes({\n      hex,\n      separator: '',\n      start: '',\n    }).bytes;\n  }\n\n  private createUnavailableException(): CapacitorException {\n    return new CapacitorException(\n      'This NFC plugin method is not available on this platform.',\n      ExceptionCode.Unavailable\n    );\n  }\n\n  private createSessionMissingException(): CapacitorException {\n    return new CapacitorException('There is currently no NFC session.');\n  }\n}\n"]}