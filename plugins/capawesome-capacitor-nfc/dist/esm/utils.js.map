{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ConvertBytesToHexOptions,\n  ConvertBytesToStringOptions,\n  ConvertHexToBytesOptions,\n  ConvertHexToNumberOptions,\n  ConvertNumberToHexOptions,\n  ConvertStringToBytesOptions,\n  CreateNdefAbsoluteUriRecordOptions,\n  CreateNdefExternalRecordOptions,\n  CreateNdefMimeMediaRecordOptions,\n  CreateNdefRecordOptions,\n  CreateNdefRecordResult,\n  CreateNdefTextRecordOptions,\n  CreateNdefUriRecordOptions,\n  GetIdentifierCodeFromNdefUriRecordOptions,\n  GetLanguageFromNdefTextRecordOptions,\n  GetTextFromNdefTextRecordOptions,\n  INfcUtils,\n  NdefRecord,\n} from './definitions';\nimport { UriIdentifierCode, RecordTypeDefinition, TypeNameFormat } from './definitions';\n\nexport class NfcUtils implements INfcUtils {\n  public static readonly errorInvalidHexString = 'Cannot convert an invalid hex string.';\n\n  public convertBytesToHex(options: ConvertBytesToHexOptions): { hex: string } {\n    const start = options.start === undefined ? '0x' : options.start;\n    const separator = options.separator === undefined ? '' : options.separator;\n    const hexArray: string[] = [];\n    for (const byte of options.bytes) {\n      const hexItem = ('0' + (byte & 0xff).toString(16)).slice(-2).toUpperCase();\n      hexArray.push(hexItem);\n    }\n    const hex = start + hexArray.join(separator);\n    return { hex };\n  }\n\n  public convertBytesToString(options: ConvertBytesToStringOptions): { text: string } {\n    const bytes = options.bytes;\n    const textDecoder = new TextDecoder();\n    const uint8Array = new Uint8Array(bytes);\n    const text = textDecoder.decode(uint8Array);\n    return { text };\n  }\n\n  public convertHexToBytes(options: ConvertHexToBytesOptions): { bytes: number[] } {\n    const start = options.start === undefined ? '0x' : options.start;\n    const separator = options.separator === undefined ? '' : options.separator;\n    let hex = options.hex.replace(start, '');\n    hex = hex.split(separator).join('');\n    const bytes: number[] = [];\n    for (let i = 0; i < hex.length; i += 2) {\n      bytes.push(parseInt(hex.substr(i, 2), 16));\n    }\n    return { bytes };\n  }\n\n  public convertHexToNumber(options: ConvertHexToNumberOptions): { number: number } {\n    const hex = options.hex;\n    const number = parseInt(hex, 16);\n    return { number };\n  }\n\n  public convertNumberToHex(options: ConvertNumberToHexOptions): { hex: string } {\n    const number = options.number;\n    const hex = number.toString(16);\n    return { hex };\n  }\n\n  public convertStringToBytes(options: ConvertStringToBytesOptions): { bytes: number[] } {\n    const text = options.text;\n    const textEncoder = new TextEncoder();\n    const uint8Array = textEncoder.encode(text);\n    const bytes = Array.from(uint8Array);\n    return { bytes };\n  }\n\n  public createNdefRecord(options: CreateNdefRecordOptions): { record: NdefRecord } {\n    let { id, payload, tnf, type } = options;\n    if (id === undefined) {\n      id = [];\n    } else if (typeof id === 'string') {\n      id = this.convertStringToBytes({ text: id }).bytes;\n    }\n    if (payload === undefined) {\n      payload = [];\n    } else if (typeof payload === 'string') {\n      payload = this.convertStringToBytes({ text: payload }).bytes;\n    }\n    tnf = options.tnf || TypeNameFormat.Empty;\n    if (type === undefined) {\n      type = [];\n    } else if (typeof type === 'string') {\n      type = this.convertStringToBytes({ text: type }).bytes;\n    }\n    const record: NdefRecord = {\n      id,\n      payload,\n      tnf,\n      type,\n    };\n    return { record };\n  }\n\n  public createNdefEmptyRecord(): CreateNdefRecordResult {\n    return this.createNdefRecord({\n      id: [],\n      payload: [],\n      tnf: TypeNameFormat.Empty,\n      type: [],\n    });\n  }\n\n  public createNdefTextRecord(options: CreateNdefTextRecordOptions): CreateNdefRecordResult {\n    const language = options.language || 'en';\n    const payload = this.createTextPayload(options.text, language);\n    return this.createNdefRecord({\n      id: options.id,\n      payload,\n      tnf: TypeNameFormat.WellKnown,\n      type: RecordTypeDefinition.Text,\n    });\n  }\n\n  public createNdefUriRecord(options: CreateNdefUriRecordOptions): CreateNdefRecordResult {\n    const identifierCode = options.identifierCode || UriIdentifierCode.None;\n    let uriAsBytes;\n    if (typeof options.uri === 'string') {\n      uriAsBytes = this.convertStringToBytes({ text: options.uri }).bytes;\n    } else {\n      uriAsBytes = options.uri;\n    }\n    const payload = [identifierCode, ...uriAsBytes];\n    return this.createNdefRecord({\n      id: options.id,\n      payload,\n      tnf: TypeNameFormat.WellKnown,\n      type: RecordTypeDefinition.Uri,\n    });\n  }\n\n  public createNdefAbsoluteUriRecord(options: CreateNdefAbsoluteUriRecordOptions): CreateNdefRecordResult {\n    return this.createNdefRecord({\n      id: options.id,\n      payload: undefined,\n      tnf: TypeNameFormat.AbsoluteUri,\n      type: options.uri,\n    });\n  }\n\n  public createNdefMimeMediaRecord(options: CreateNdefMimeMediaRecordOptions): CreateNdefRecordResult {\n    return this.createNdefRecord({\n      id: options.id,\n      payload: options.mimeData,\n      tnf: TypeNameFormat.MimeMedia,\n      type: options.mimeType,\n    });\n  }\n\n  public createNdefExternalRecord(options: CreateNdefExternalRecordOptions): CreateNdefRecordResult {\n    return this.createNdefRecord({\n      id: options.id,\n      payload: options.payload,\n      tnf: TypeNameFormat.External,\n      type: `${options.domain}:${options.type}`,\n    });\n  }\n\n  public getIdentifierCodeFromNdefUriRecord(options: GetIdentifierCodeFromNdefUriRecordOptions): {\n    identifierCode: UriIdentifierCode | undefined;\n  } {\n    const record = options.record;\n    const firstByte = record.payload ? record.payload[0] : undefined;\n    return { identifierCode: firstByte };\n  }\n\n  public getLanguageFromNdefTextRecord(options: GetLanguageFromNdefTextRecordOptions): {\n    language: string | undefined;\n  } {\n    const record = options.record;\n    const payload = record.payload;\n    if (!payload) {\n      return { language: undefined };\n    }\n    const languageIdentifierLength = payload && payload.length > 0 ? payload[0] : 0;\n    const language = this.convertBytesToString({\n      bytes: payload,\n    }).text.substring(1, languageIdentifierLength + 1);\n    return { language };\n  }\n\n  public getTextFromNdefTextRecord(options: GetTextFromNdefTextRecordOptions): { text: string | undefined } {\n    const record = options.record;\n    const payload = record.payload;\n    if (!payload) {\n      return { text: undefined };\n    }\n    const languageIdentifierLength = payload && payload.length > 0 ? payload[0] : 0;\n    const text = this.convertBytesToString({\n      bytes: payload,\n    }).text.substring(languageIdentifierLength + 1);\n    return { text };\n  }\n\n  public getUriFromNdefUriRecord(options: GetIdentifierCodeFromNdefUriRecordOptions): { uri: string | undefined } {\n    const record = options.record;\n    const payload = record.payload;\n    if (!payload) {\n      return { uri: undefined };\n    }\n    const uri = this.convertBytesToString({\n      bytes: payload.slice(1),\n    }).text;\n    return { uri };\n  }\n\n  public mapBytesToRecordTypeDefinition(options: { bytes: number[] }): { type: RecordTypeDefinition | undefined } {\n    let type = undefined;\n    const { bytes } = options;\n    if (bytes.length === 1) {\n      if (bytes[0] === 84) {\n        type = RecordTypeDefinition.Text;\n      } else if (bytes[0] === 85) {\n        type = RecordTypeDefinition.Uri;\n      }\n    }\n    if (bytes.length === 2) {\n      if (bytes[0] === 72 && bytes[1] === 99) {\n        type = RecordTypeDefinition.HandoverCarrier;\n      } else if (bytes[0] === 72 && bytes[1] === 114) {\n        type = RecordTypeDefinition.HandoverRequest;\n      } else if (bytes[0] === 72 && bytes[1] === 115) {\n        type = RecordTypeDefinition.HandoverSelect;\n      } else if (bytes[0] === 97 && bytes[1] === 99) {\n        type = RecordTypeDefinition.AlternativeCarrier;\n      } else if (bytes[0] === 83 && bytes[1] === 112) {\n        type = RecordTypeDefinition.SmartPoster;\n      }\n    }\n    return { type };\n  }\n\n  private createTextPayload(text: number[] | string, language: number[] | string): number[] {\n    language = language || 'en';\n\n    const textAsbytes = Array.isArray(text)\n      ? text\n      : this.convertStringToBytes({\n          text: text,\n        }).bytes;\n    const languageAsbytes = Array.isArray(language)\n      ? language\n      : this.convertStringToBytes({\n          text: language,\n        }).bytes;\n    const payload = [...languageAsbytes, ...textAsbytes];\n    payload.unshift(language.length);\n\n    return payload;\n  }\n}\n"]}