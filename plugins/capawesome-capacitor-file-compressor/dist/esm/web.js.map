{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,iBAAkB,SAAQ,SAAS;IAKvC,KAAK,CAAC,aAAa,CAAC,OAA6B;;QACtD,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAC1B,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;SACvD;QACD,MAAM,QAAQ,SAAG,OAAO,CAAC,QAAQ,mCAAI,YAAY,CAAC;QAClD,IAAI,QAAQ,KAAK,YAAY,IAAI,QAAQ,KAAK,YAAY,EAAE;YAC1D,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,CAAC;SAClE;QACD,MAAM,OAAO,SAAG,OAAO,CAAC,OAAO,mCAAI,GAAG,CAAC;QACvC,IAAI,OAAO,GAAG,CAAC,IAAI,OAAO,GAAG,CAAC,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,CAAC;SAC/D;QACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;YAChC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAC3B,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE;gBACnB,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC;gBACjC,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;gBAC1B,KAAK,CAAC,GAAG,GAAG,UAAoB,CAAC;gBACjC,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE;oBAClB,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;oBAChC,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;oBACvD,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC;oBAC9B,aAAa,CAAC,KAAK,GAAG,KAAK,CAAC;oBAC5B,MAAM,oBAAoB,GAAG,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBAC5D,IAAI,CAAC,oBAAoB,EAAE;wBACzB,MAAM,CAAC,+BAA+B,CAAC,CAAC;wBACxC,OAAO;qBACR;oBACD,oBAAoB,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;oBAC3D,oBAAoB,CAAC,MAAM,CAAC,MAAM,CAChC,CAAC,IAAI,EAAE,EAAE;wBACP,IAAI,IAAI,EAAE;4BACR,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;yBACnB;6BAAM;4BACL,MAAM,CAAC,qBAAqB,CAAC,CAAC;yBAC/B;wBACD,aAAa,CAAC,MAAM,EAAE,CAAC;oBACzB,CAAC,EACD,QAAQ,EACR,OAAO,CACR,CAAC;gBACJ,CAAC,CAAC;gBACF,KAAK,CAAC,OAAO,GAAG,CAAC,KAAK,EAAE,EAAE;oBACxB,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC,CAAC;YACJ,CAAC,CAAC;YACF,MAAM,CAAC,OAAO,GAAG,CAAC,KAAK,EAAE,EAAE;gBACzB,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;;AAxDuB,oCAAkB,GAAG,wBAAwB,CAAC;AAC9C,4CAA0B,GAAG,kCAAkC,CAAC;AAChE,+CAA6B,GAAG,4BAA4B,CAAC","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { CompressImageOptions, CompressImageResult, FileCompressorPlugin } from './definitions';\n\nexport class FileCompressorWeb extends WebPlugin implements FileCompressorPlugin {\n  private static readonly ERROR_FILE_MISSING = 'blob must be provided.';\n  private static readonly ERROR_QUALITY_OUT_OF_RANGE = 'quality must be between 0 and 1.';\n  private static readonly ERROR_MIME_TYPE_NOT_SUPPORTED = 'mimeType is not supported.';\n\n  public async compressImage(options: CompressImageOptions): Promise<CompressImageResult> {\n    const blob = options.blob;\n    if (!blob) {\n      throw new Error(FileCompressorWeb.ERROR_FILE_MISSING);\n    }\n    const mimeType = options.mimeType ?? 'image/jpeg';\n    if (mimeType !== 'image/jpeg' && mimeType !== 'image/webp') {\n      throw new Error(FileCompressorWeb.ERROR_MIME_TYPE_NOT_SUPPORTED);\n    }\n    const quality = options.quality ?? 0.6;\n    if (quality < 0 || quality > 1) {\n      throw new Error(FileCompressorWeb.ERROR_QUALITY_OUT_OF_RANGE);\n    }\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(blob);\n      reader.onload = () => {\n        const base64data = reader.result;\n        const image = new Image();\n        image.src = base64data as string;\n        image.onload = () => {\n          const { height, width } = image;\n          const canvasElement = document.createElement('canvas');\n          canvasElement.height = height;\n          canvasElement.width = width;\n          const canvasElementContext = canvasElement.getContext('2d');\n          if (!canvasElementContext) {\n            reject('Could not get canvas context.');\n            return;\n          }\n          canvasElementContext.drawImage(image, 0, 0, width, height);\n          canvasElementContext.canvas.toBlob(\n            (blob) => {\n              if (blob) {\n                resolve({ blob });\n              } else {\n                reject('Could not get blob.');\n              }\n              canvasElement.remove();\n            },\n            mimeType,\n            quality\n          );\n        };\n        image.onerror = (error) => {\n          reject(error);\n        };\n      };\n      reader.onerror = (error) => {\n        reject(error);\n      };\n    });\n  }\n}\n"]}