{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAgSA;;GAEG;AACH,MAAM,CAAN,IAAY,mBA2FX;AA3FD,WAAY,mBAAmB;IAC7B;;;;OAIG;IACH,oEAAY,CAAA;IACZ;;;;OAIG;IACH,6DAAQ,CAAA;IACR;;;;OAIG;IACH,2DAAO,CAAA;IACP;;;;OAIG;IACH,2DAAO,CAAA;IACP;;;;OAIG;IACH,2DAAO,CAAA;IACP;;;;OAIG;IACH,2DAAO,CAAA;IACP;;;;OAIG;IACH,2GAA+B,CAAA;IAC/B;;;;OAIG;IACH,2DAAO,CAAA;IACP;;;;OAIG;IACH,qEAAY,CAAA;IACZ;;;;OAIG;IACH,uEAAa,CAAA;IACb;;;;OAIG;IACH,mFAAmB,CAAA;IACnB;;;;OAIG;IACH,8DAAS,CAAA;IACT;;;;OAIG;IACH,oFAAoB,CAAA;IACpB;;;;OAIG;IACH,8EAAiB,CAAA;IACjB;;;;OAIG;IACH,4DAAQ,CAAA;AACV,CAAC,EA3FW,mBAAmB,KAAnB,mBAAmB,QA2F9B","sourcesContent":["import type { PermissionState, PluginListenerHandle } from '@capacitor/core';\n\nexport interface WifiPlugin {\n  /**\n   * Connect to a Wi-Fi network.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  connect(options: ConnectOptions): Promise<void>;\n  /**\n   * Disconnect from a Wi-Fi network.\n   *\n   * On **iOS**, you can only disconnect from networks that you connected to using the plugin.\n   * This also removes the Wi-Fi network from the list of known networks.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  disconnect(options?: DisconnectOptions): Promise<void>;\n  /**\n   * Get a list of Wi-Fi networks found during the last scan.\n   *\n   * The returned networks are the most recently updated results, which may be from a previous scan\n   * if your current scan has not completed or succeeded.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  getAvailableNetworks(): Promise<GetAvailableNetworksResult>;\n  /**\n   * Get the current IP address of the device.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  getIpAddress(): Promise<GetIpAddressResult>;\n  /**\n   * Get the received signal strength indicator (RSSI) of the current network in dBm.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  getRssi(): Promise<GetRssiResult>;\n  /**\n   * Get the service set identifier (SSID) of the current network.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  getSsid(): Promise<GetSsidResult>;\n  /**\n   * Check if Wi-Fi is enabled.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  isEnabled(): Promise<IsEnabledResult>;\n  /**\n   * Start a scan for Wi-Fi networks.\n   *\n   * This call may fail for any of the following reasons:\n   * - Scan requests may be throttled because of too many scans in a short time.\n   * - The device is idle and scanning is disabled.\n   * - Wi-Fi hardware reports a scan failure.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  startScan(): Promise<void>;\n  /**\n   * Check permissions for the plugin.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  checkPermissions(): Promise<PermissionStatus>;\n  /**\n   * Request permissions for the plugin.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 6.0.0\n   */\n  requestPermissions(\n    options?: RequestPermissionsOptions,\n  ): Promise<PermissionStatus>;\n  /**\n   * Called when the scan results are available.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   */\n  addListener(\n    eventName: 'networksScanned',\n    listenerFunc: (event: NetworksScannedEvent) => void,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Remove all listeners for this plugin.\n   *\n   * @since 6.0.0\n   */\n  removeAllListeners(): Promise<void>;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface ConnectOptions {\n  /**\n   * The SSID of the network to connect to.\n   *\n   *\n   */\n  ssid: string;\n  /**\n   * The password of the network to connect to.\n   *\n   * @since 6.0.0\n   */\n  password?: string;\n  /**\n   * Whether or not the SSID is hidden.\n   *\n   * Only available on Android.\n   *\n   * @since 6.0.0\n   * @default false\n   * @see https://developer.android.com/reference/android/net/wifi/WifiNetworkSpecifier.Builder#setIsHiddenSsid(boolean)\n   */\n  isHiddenSsid?: boolean;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface DisconnectOptions {\n  /**\n   * The SSID of the network to disconnect from.\n   * If not provided, the device will disconnect from the current network.\n   *\n   * Only available on iOS.\n   *\n   * @since 6.0.0\n   */\n  ssid?: string;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface GetAvailableNetworksResult {\n  /**\n   * The list of Wi-Fi networks found during the last scan.\n   *\n   * @since 6.0.0\n   */\n  networks: Network[];\n}\n\n/**\n * @since 6.0.0\n */\nexport interface GetIpAddressResult {\n  /**\n   * The IP address of the device.\n   *\n   * @since 6.0.0\n   */\n  address: string;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface GetRssiResult {\n  /**\n   * The received signal strength indicator (RSSI) of the current network in dBm.\n   *\n   * @since 6.0.0\n   */\n  rssi: number;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface GetSsidResult {\n  /**\n   * The service set identifier (SSID) of the current network.\n   *\n   * On **iOS 14+**, the SSID can only be retrieved if the network was connected to using the plugin\n   * or if the app has permission to access precise location.\n   *\n   * @since 6.0.0\n   */\n  ssid: string;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface IsEnabledResult {\n  /**\n   * Whether or not Wi-Fi is enabled.\n   *\n   * @since 6.0.0\n   */\n  enabled: boolean;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface RequestPermissionsOptions {\n  /**\n   * The permissions to request.\n   *\n   * @since 6.0.0\n   * @default [\"location\"]\n   */\n  permissions?: PermissionType[];\n}\n\n/**\n * @since 6.0.0\n */\nexport interface PermissionStatus {\n  /**\n   * @since 6.0.0\n   */\n  location: PermissionState;\n}\n\n/**\n * @since 6.0.0\n */\nexport interface NetworksScannedEvent {\n  /**\n   * The list of Wi-Fi networks found during the scan.\n   *\n   * @since 6.0.0\n   */\n  networks: Network[];\n}\n\n/**\n * @since 6.0.0\n */\nexport interface Network {\n  /**\n   * The received signal strength indicator (RSSI) of the network in dBm.\n   *\n   * @since 6.1.0\n   */\n  rssi: number;\n  /**\n   * The service set identifier (SSID) of the network.\n   *\n   * Only available on Android (SDK 33+).\n   *\n   * @since 6.1.0\n   */\n  securityTypes?: NetworkSecurityType[];\n  /**\n   * The service set identifier (SSID) of the network.\n   *\n   * @since 6.0.0\n   * @example \"MyNetwork\"\n   */\n  ssid: string;\n}\n\n/**\n * @since 6.0.0\n */\nexport type PermissionType = 'location';\n\n/**\n * @since 6.1.0\n */\nexport enum NetworkSecurityType {\n  /**\n   * Unknown security type.\n   *\n   * @since 6.1.0\n   */\n  UNKNOWN = -1,\n  /**\n   * Open network.\n   *\n   * @since 6.1.0\n   */\n  OPEN = 0,\n  /**\n   * WEP network.\n   *\n   * @since 6.1.0\n   */\n  WEP = 1,\n  /**\n   * PSK network.\n   *\n   * @since 6.1.0\n   */\n  PSK = 2,\n  /**\n   * EAP network.\n   *\n   * @since 6.1.0\n   */\n  EAP = 3,\n  /**\n   * SAE network.\n   *\n   * @since 6.1.0\n   */\n  SAE = 4,\n  /**\n   * WPA3-Enterprise in 192-bit security network.\n   *\n   * @since 6.1.0\n   */\n  EAP_WPA3_ENTERPRISE_192_BIT = 5,\n  /**\n   * OWE network.\n   *\n   * @since 6.1.0\n   */\n  OWE = 6,\n  /**\n   * WAPI PSK network.\n   *\n   * @since 6.1.0\n   */\n  WAPI_PSK = 7,\n  /**\n   * WAPI Certificate network.\n   *\n   * @since 6.1.0\n   */\n  WAPI_CERT = 8,\n  /**\n   * WPA3-Enterprise network.\n   *\n   * @since 6.1.0\n   */\n  WPA3_ENTERPRISE = 9,\n  /**\n   * OSEN network.\n   *\n   * @since 6.1.0\n   */\n  OSEN = 10,\n  /**\n   * Passpoint R1/R2 network, where TKIP and WEP are not allowed.\n   *\n   * @since 6.1.0\n   */\n  PASSPOINT_R1_R2 = 11,\n  /**\n   * Passpoint R3 network, where TKIP and WEP are not allowed, and PMF must be set to Required.\n   *\n   * @since 6.1.0\n   */\n  PASSPOINT_R3 = 12,\n  /**\n   * Easy Connect (DPP) network.\n   *\n   * @since 6.1.0\n   */\n  DPP = 13,\n}\n"]}