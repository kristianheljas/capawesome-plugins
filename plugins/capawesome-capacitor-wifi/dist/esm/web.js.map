{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAc/E,MAAM,OAAO,OAAQ,SAAQ,SAAS;IAC7B,KAAK,CAAC,OAAO,CAAC,QAAwB;QAC3C,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;IAC5C,CAAC;IAEM,KAAK,CAAC,UAAU;QACrB,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;IAC5C,CAAC;IAEM,KAAK,CAAC,oBAAoB;QAC/B,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;IAC5C,CAAC;IAEM,KAAK,CAAC,YAAY;QACvB,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;IAC5C,CAAC;IAEM,KAAK,CAAC,OAAO;QAClB,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;IAC5C,CAAC;IAEM,KAAK,CAAC,OAAO;QAClB,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;IAC5C,CAAC;IAEM,KAAK,CAAC,SAAS;QACpB,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;IAC5C,CAAC;IAEM,KAAK,CAAC,SAAS;QACpB,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;IAC5C,CAAC;IAEM,KAAK,CAAC,gBAAgB;QAC3B,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;IAC5C,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAC7B,QAAgD;QAEhD,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAC;IAC5C,CAAC;IAEO,4BAA4B;QAClC,OAAO,IAAI,kBAAkB,CAC3B,yBAAyB,EACzB,aAAa,CAAC,aAAa,CAC5B,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { CapacitorException, ExceptionCode, WebPlugin } from '@capacitor/core';\n\nimport type {\n  ConnectOptions,\n  GetAvailableNetworksResult,\n  GetIpAddressResult,\n  GetRssiResult,\n  GetSsidResult,\n  IsEnabledResult,\n  PermissionStatus,\n  RequestPermissionsOptions,\n  WifiPlugin,\n} from './definitions';\n\nexport class WifiWeb extends WebPlugin implements WifiPlugin {\n  public async connect(_options: ConnectOptions): Promise<void> {\n    throw this.createUnimplementedException();\n  }\n\n  public async disconnect(): Promise<void> {\n    throw this.createUnimplementedException();\n  }\n\n  public async getAvailableNetworks(): Promise<GetAvailableNetworksResult> {\n    throw this.createUnimplementedException();\n  }\n\n  public async getIpAddress(): Promise<GetIpAddressResult> {\n    throw this.createUnimplementedException();\n  }\n\n  public async getRssi(): Promise<GetRssiResult> {\n    throw this.createUnimplementedException();\n  }\n\n  public async getSsid(): Promise<GetSsidResult> {\n    throw this.createUnimplementedException();\n  }\n\n  public async isEnabled(): Promise<IsEnabledResult> {\n    throw this.createUnimplementedException();\n  }\n\n  public async startScan(): Promise<void> {\n    throw this.createUnimplementedException();\n  }\n\n  public async checkPermissions(): Promise<PermissionStatus> {\n    throw this.createUnimplementedException();\n  }\n\n  public async requestPermissions(\n    _options?: RequestPermissionsOptions | undefined,\n  ): Promise<PermissionStatus> {\n    throw this.createUnimplementedException();\n  }\n\n  private createUnimplementedException(): CapacitorException {\n    return new CapacitorException(\n      'Not implemented on web.',\n      ExceptionCode.Unimplemented,\n    );\n  }\n}\n"]}